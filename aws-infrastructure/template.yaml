AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Personal Finance AI - Receipt Processing and Categorization

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, staging, prod)
    AllowedValues: [dev, staging, prod]

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.11
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable

Resources:
  # Lambda Function
  PersonalFinanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "personal-finance-${Environment}"
      CodeUri: ../backend/
      Handler: lambda_function.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TransactionsTable
        - S3CrudPolicy:
            BucketName: !Ref ReceiptsBucket
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - textract:DetectDocumentText
                - textract:AnalyzeDocument
              Resource: '*'
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref PersonalFinanceApi

  # API Gateway
  PersonalFinanceApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "personal-finance-api-${Environment}"
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # DynamoDB Table
  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "personal-finance-transactions-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: transaction_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: transaction_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user_id-created_at-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # S3 Bucket for Receipt Storage
  ReceiptsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "personal-finance-receipts-${Environment}-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldReceipts
            Status: Enabled
            ExpirationInDays: 365

  # S3 Bucket Policy
  ReceiptsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ReceiptsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt PersonalFinanceFunctionRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: !Sub "${ReceiptsBucket}/*"

Outputs:
  PersonalFinanceApi:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${PersonalFinanceApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  PersonalFinanceFunction:
    Description: Lambda Function ARN
    Value: !GetAtt PersonalFinanceFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-FunctionArn"

  TransactionsTable:
    Description: DynamoDB Table Name
    Value: !Ref TransactionsTable
    Export:
      Name: !Sub "${AWS::StackName}-TableName"

  ReceiptsBucket:
    Description: S3 Bucket for Receipt Storage
    Value: !Ref ReceiptsBucket
    Export:
      Name: !Sub "${AWS::StackName}-BucketName" 